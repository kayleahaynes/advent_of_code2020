ticket_parts_decided
which(ticket_parts_decided %like% "departure")
my_ticket <- read_csv('day16_b.txt', col_names = FALSE)
my_ticket
my_ticket[which(ticket_parts_decided %like% "departure")]
prod(my_ticket[which(ticket_parts_decided %like% "departure")])
ticket_parts_decided
ticket_parts <- data.frame()
for (i in 1:ncol(valid_tickets)){
for (j in 1:nrow(find_valid_numbers)){
valid_numbers <- unique(c(unlist(find_valid_numbers$valid1[[j]]), unlist(find_valid_numbers$valid2[[j]])))
ticket_parts[i,j] = sum(!valid_tickets[,i] %>% pull() %in% valid_numbers) == 0
}
}
ticket_parts
cubes <- read_table('day17.txt', col_names = FALSE)
# set up -----------------------------------------------------------------------
library(tidyverse)
cubes <- read_table('day17.txt', col_names = FALSE)
cubes
cubes <- read_csv('day17.txt', col_names = FALSE)
cubes <- read_delim('day17.txt', col_names = FALSE, delim = " ")
cubes
cubes <- read_delim('day17.txt', col_names = FALSE, delim = "")
cubes <- read_table('day17.txt', col_names = FALSE)
cubes_transformed <- cubes %>%
separate(X1, paste("col", 1:nchar(cube$X1[1])), sep = "(?<=.)",extra = "drop") %>%
as.matrix()
cubes_transformed <- cubes %>%
separate(X1, paste("col", 1:nchar(cubes$X1[1])), sep = "(?<=.)",extra = "drop") %>%
as.matrix()
cubes_transformed
x <- array(rep(1, 365*5*4), dim=c(365, 5, 4))
x
x <- array(cubes)
x
x <- array(cubes_transformed)
x
x <- array(cubes_transformed, dim = c(3,3,1))
x
cubes_transformed
reps = 1
dim(X)
dim(x)
dim(x)[3]
cube_array
cube_array <- array(cubes)
cube_array
cube_array <- array(cubes, dim = c(3,3,1))
cube_array
cube_array <- array(cubes_transformed, dim = c(3,3,1))
cube_array
cube_array[cube_array == "."] <- 0
cube_array[cube_array == "#"] <- 1
cube_array
cube_array <- as.numeric(cube_array)
cube_array
cube_array[cube_array == "."] <- as.numeric(0)
cube_array
new_cube <- array()
new_cube
new_cube[1,1,1]
new_cube[1,1,1] <- 1
new_cube <- NULL
new_cube[1,1,1] <- 1
new_cube[1,1] <- 1
new_cube
new_cube <- NA
new_cube <- [1,1,1]
new_cube[1,1,1]
dim(cube_array)
cube_array[cube_array == "."] <- 0
cube_array[cube_array == "#"] <- 1
dim(cube_array)
cube_array <- array(cubes_transformed, dim = c(3,3,1))
cube_array[cube_array == "."] <- 0
cube_array[cube_array == "#"] <- 1
dim(cube_array)
dim(cube_array) + 2
new_cube <- array(NA, dim = dim(cube_array) + 2)
new_cube
i <- 1
j <- 1
k <- 1
cube_array
cube_array[0,0,0]
cube_array[0,0,1]
cube_array[1,1,1]
cube_array[-1:1,-1:1,-1:1]
cube_array[-1:1,]
cube_array[1,]
cube_array[1,,]
cube_array[,,1]
cube_array[,,2]
cube_array[,,1]
cube_array[,,0:2]
cube_array
transform_cube <- array(NA, dim = dim(cube_array) + 2)
transform_cube[,,2] <- cube_array[,,1]
cube_array[,,1]
transform_cube[,,2]
cube_array[,,1]
transform_cube <- array(NA, dim = dim(cube_array))
transform_cube[,,2] <- cube_array[,,1]
transform_cube
transform_cube <- array(NA, dim = c(dim(cube_array)[1:2], dim(cube_array[3]))
)
transform_cube
transform_cube <- array(NA, dim = c(dim(cube_array)[1:2], dim(cube_array[3] + 2)))
transform_cube[,,2] <- cube_array[,,1]
transform_cube <- array(NA, dim = c(dim(cube_array)[1:2], dim(cube_array[3])+ 2))
transform_cube[,,2] <- cube_array[,,1]
transform_cube
dim(cube_array[3])
cube_array <- array(cubes_transformed, dim = c(3,3,1))
cube_array[cube_array == "."] <- 0
cube_array[cube_array == "#"] <- 1
transform_cube <- array(NA, dim = c(dim(cube_array)[1:2], dim(cube_array[3])+ 2))
transform_cube
cube_array <- array(cubes_transformed, dim = c(3,3,1))
cube_array[cube_array == "."] <- 0
cube_array[cube_array == "#"] <- 1
c(dim(cube_array)[1:2], dim(cube_array[3])+ 2)
transform_cube <- array(NA, dim = c(dim(cube_array)[1:2], dim(cube_array)[3]+ 2))
transform_cube
transform_cube[,,2] <- cube_array[,,1]
transform_cube
new_cube <- array(NA, dim = dim(cube_array) + 2)
new_cube
i <- 1
transform_cube
cube_array
data <- read_csv("day17.txt", col_names = F)
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T)) %>%
rowid_to_column("X") %>%
pivot_longer(-X, names_to = "Y", values_to = "state") %>%
filter(state=="#") %>%
mutate(Y = as.integer(gsub(pattern = "V", replacement = "", Y))) %>%
mutate(Y = as.integer(Y)) %>%
mutate(Z = 0) %>%
select(X,Y,Z)
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T))
cubes
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T)) %>%
rowid_to_column("X")
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T)) %>%
rowid_to_column("X") %>%
pivot_longer(-X, names_to = "Y", values_to = "state")
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T)) %>%
rowid_to_column("X") %>%
pivot_longer(-X, names_to = "Y", values_to = "state") %>%
filter(state=="#")
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T)) %>%
rowid_to_column("X") %>%
pivot_longer(-X, names_to = "Y", values_to = "state") %>%
filter(state=="#") %>%
mutate(Y = as.integer(gsub(pattern = "V", replacement = "", Y)))
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T)) %>%
rowid_to_column("X") %>%
pivot_longer(-X, names_to = "Y", values_to = "state") %>%
filter(state=="#") %>%
mutate(Y = as.integer(gsub(pattern = "V", replacement = "", Y))) %>%
mutate(Y = as.integer(Y)) %>%
mutate(Z = 0)
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T)) %>%
rowid_to_column("X") %>%
pivot_longer(-X, names_to = "Y", values_to = "state") %>%
filter(state=="#") %>%
mutate(Y = as.integer(gsub(pattern = "V", replacement = "", Y))) %>%
mutate(Y = as.integer(Y)) %>%
mutate(Z = 0) %>%
select(X,Y,Z)
cubes
min(cubes$X)-1):(max(cubes$X)+1)
min(cubes$X)-1):(max(cubes$X)+1
(min(cubes$X)-1):(max(cubes$X)+1)
for(i in 1:6){
# if(i==2){break}
# print(i)
results <- list()
for(x in (min(cubes$X)-1):(max(cubes$X)+1)){
for(y in (min(cubes$Y)-1):(max(cubes$Y)+1)){
for(z in (min(cubes$Z)-1):(max(cubes$Z)+1)){
#x=1
#y=2
#z=0
touching <-
cubes %>%
filter(X>=(x-1)&X<=(x+1),
Y>=(y-1)&Y<=(y+1),
Z>=(z-1)&Z<=(z+1)) %>%
nrow()
current <-
cubes %>%
filter(X==(x)&X==(x),
Y==(y)&Y==(y),
Z==(z)&Z==(z)) %>%
nrow()
if(current==0&touching==3){
results[[paste(x,y,z)]] <- data.frame("X"=x,"Y"=y,"Z"=z)
}
if(current==1&(touching==(2+1)|touching==(3+1))){
results[[paste(x,y,z)]] <- data.frame("X"=x,"Y"=y,"Z"=z)
}
}
}
}
cubes <- bind_rows(results)
}
cubes
#x=1
#y=2
#z=0
touching <-
cubes %>%
filter(X>=(x-1)&X<=(x+1),
Y>=(y-1)&Y<=(y+1),
Z>=(z-1)&Z<=(z+1)) %>%
nrow()
touching
cubes <-
as_tibble(data$X1 %>% str_split(pattern = "", simplify = T)) %>%
rowid_to_column("X") %>%
pivot_longer(-X, names_to = "Y", values_to = "state") %>%
filter(state=="#") %>%
mutate(Y = as.integer(gsub(pattern = "V", replacement = "", Y))) %>%
mutate(Y = as.integer(Y)) %>%
mutate(Z = 0) %>%
select(X,Y,Z)
i <- 1
(min(cubes$X)-1):(max(cubes$X)+1)
x <-9
x <-0
(min(cubes$Y)-1):(max(cubes$Y)+1)
y <- 0
(min(cubes$Z)-1):(max(cubes$Z)+1)
z = -1
#x=1
#y=2
#z=0
touching <-
cubes %>%
filter(X>=(x-1)&X<=(x+1),
Y>=(y-1)&Y<=(y+1),
Z>=(z-1)&Z<=(z+1)) %>%
nrow()
touching
current <-
cubes %>%
filter(X==(x)&X==(x),
Y==(y)&Y==(y),
Z==(z)&Z==(z)) %>%
nrow()
current
current==0&touching==3
results[[paste(x,y,z)]]
paste(x,y,z)
current==1&(touching==(2+1)|touching==(3+1)))
current==1&(touching==(2+1)|touching==(3+1))
data.frame("X"=x,"Y"=y,"Z"=z)
cubes
i <- 1
# if(i==2){break}
# print(i)
results <- list()
for(x in (min(cubes$X)-1):(max(cubes$X)+1)){
for(y in (min(cubes$Y)-1):(max(cubes$Y)+1)){
for(z in (min(cubes$Z)-1):(max(cubes$Z)+1)){
#x=1
#y=2
#z=0
touching <-
cubes %>%
filter(X>=(x-1)&X<=(x+1),
Y>=(y-1)&Y<=(y+1),
Z>=(z-1)&Z<=(z+1)) %>%
nrow()
current <-
cubes %>%
filter(X==(x)&X==(x),
Y==(y)&Y==(y),
Z==(z)&Z==(z)) %>%
nrow()
if(current==0&touching==3){
results[[paste(x,y,z)]] <- data.frame("X"=x,"Y"=y,"Z"=z)
}
if(current==1&(touching==(2+1)|touching==(3+1))){
results[[paste(x,y,z)]] <- data.frame("X"=x,"Y"=y,"Z"=z)
}
}
}
}
cubes <- bind_rows(results)
cubes
cubes %>% arrange(z)
cubes %>% arrange(Z)
cubes %>% nrow()
current==0&touching==3
current==1&(touching==(2+1)|touching==(3+1))
data <- "1 + 2 * 3 + 4 * 5 + 6"
data
"%*%" <- function(x,y){x*y}
"%+%" <- function(x,y){x+y}
evaluate <- function(x){eval(parse(text=x))}
data <- gsub(pattern = "*", replacement = "%*%", x = data, fixed = T)
data
data <- gsub(pattern = "+", replacement = "%+%", x = data, fixed = T)
data
eval(parse(text=x))
sum(map_dbl(data, evaluate))
data
map_dbl(data, evaluate)
evaluate
data
evaluate(data)
1 + 2
x <- data
parse(text=x)
eval(parse(text=x))
1 %+% 1
1 %+% 2
1 %+% 2 %*% 3
1 + 2 * 3
%*%
1 + 2 * 3
1 + 2 %*% 3
1 %+% 2 %*% 3
?%+%
%+%
xplusy <- function(x,y){x + y}
xmultiplyy <- function(x,y){x * y}
evaluate <- function(x){eval(parse(text=x))}
data <- gsub(pattern = "*", replacement = "xmultiplyy", x = data, fixed = T)
data <- gsub(pattern = "+", replacement = "xplusy", x = data, fixed = T)
data
data <- "1 + 2 * 3 + 4 * 5 + 6"
data
data <- gsub(pattern = "*", replacement = "xmultiplyy", x = data, fixed = T)
data <- gsub(pattern = "+", replacement = "xplusy", x = data, fixed = T)
data
sum(map_dbl(data, evaluate))
%+% <- function(x,y){x + y}
%*% <- function(x,y){x * y}
evaluate <- function(x){eval(parse(text=x))}
data <- gsub(pattern = "*", replacement = "xmultiplyy", x = data, fixed = T)
data <- gsub(pattern = "+", replacement = "xplusy", x = data, fixed = T)
"%+%" <- function(x,y){x + y}
"%*%" <- function(x,y){x * y}
evaluate <- function(x){eval(parse(text=x))}
data <- gsub(pattern = "*", replacement = "xmultiplyy", x = data, fixed = T)
data <- gsub(pattern = "+", replacement = "xplusy", x = data, fixed = T)
evaluate(data)
data <- "1 + 2 * 3 + 4 * 5 + 6"
(pattern = "*", replacement = "xmultiplyy", x = data, fixed = T)
(pattern = "*", replacement = "xmultiplyy", x = data, fixed = T)
data <- "1 + 2 * 3 + 4 * 5 + 6"
data <- gsub(pattern = "*", replacement = "%*%", x = data, fixed = T)
data <- gsub(pattern = "+", replacement = "%+%", x = data, fixed = T)
evaluate(data)
parse(text=x)
1 + 2
1 + 2 * 3
(1 + 2) * 3
(1 + 2) * (3 + 4)
(1 + 2) * (3 + 4) * (5 + 6)
(1 + 2)
(1 + 2) * 3
(1 + 2)
(3 + 4)
(5 + 6)
(3 + 4) * (5 + 6)
(1 + 2) * 3
(1 + 2) * 3 + 4
(1 + 2) * 3 + 4 * 5
(1 + 2) * 3 + 4 * (5 + 6)
data <- 1 + 2 * 3 + 4 * 5 + 6
"%+%" <- function(x,y){x + y}
"%*%" <- function(x,y){x * y}
data <- gsub("+", "%+%", data, fixed = TRUE)
data
data <- 1 + 2 * 3 + 4 * 5 + 6
data
data <- "1 + 2 * 3 + 4 * 5 + 6"
data
data %>% gsub("+", "%+%", fixed = TRUE)
gsub("+", "%+%", data, fixed = TRUE)
data <- gsub("+", "%+%", data, fixed = TRUE)
data <- gsub("*", "%*%", data, fixed = TRUE)
parse(data)
eval(data)
parse(eval(data))
parse(text = data)
eval(parse(text = data))
data <- "2 * 3 + (4 * 5)"
"%+%" <- function(x,y){x + y}
"%*%" <- function(x,y){x * y}
data <- gsub("+", "%+%", data, fixed = TRUE)
data <- gsub("*", "%*%", data, fixed = TRUE)
eval(parse(text = data))
operations <- read_table('day17.txt', col_names = FALSE)
operations
operations <- read_table('day18.txt', col_names = FALSE)
operations
operations %>%
map(eval(parse(text = X1)))
operations
operations$X1
evaluation <- function(X){
u
evaluation <- function(X){
eval(parse(text = X))
}
operations %>%
map(X1, evaluation)
operations %>%
map(X1, evaluation)
operations
operations$X1
operations %>%
mutate(map(X1, evaluation))
operations
operations$X1
operations %>%
mutate(purrr::map(X1, evaluation))
data
operations %>%
mutate(X1 = gsub("+", "%+%", X1, fixed = TRUE))
operations %>%
mutate(X1 = gsub("+", "%+%", X1, fixed = TRUE),
X1 = gsub("*", "%*%", X1, fixed = TRUE))
operations %>%
mutate(X1 = gsub("+", "%+%", X1, fixed = TRUE),
X1 = gsub("*", "%*%", X1, fixed = TRUE)) %>%
mutate(purrr::map(X1, evaluation))
operations$X1
operations$X1[1]
X = operations$X1[1]
eval(parse(text = X))
operations %>%
mutate(X1 = gsub("+", "%+%", X1, fixed = TRUE),
X1 = gsub("*", "%*%", X1, fixed = TRUE)) %>%
mutate(purrr::map_dbl(X1, evaluation))
operations <- operations %>%
mutate(X1 = gsub("+", "%+%", X1, fixed = TRUE),
X1 = gsub("*", "%*%", X1, fixed = TRUE))
map_dbl(operations$X1, evaluation)
operations$X1
map_dbl(operations, evaluation)
readLines('day18.txt')
data <- readLines('day18.txt')
data
data <- gsub("+", "%+%", data, fixed = TRUE)
data <- gsub("*", "%*%", data, fixed = TRUE)
sum(map_dbl(data, evaluate))
sum(map_dbl(data, evaluation))
sum(map_dbl(operations, evaluation))
sum(map_dbl(operations$X1, evaluation))
data
data[1]
operations
operations$X1
operations$X1[1]
data[1]
data[271]
data[371]
operations$X1[371]
map_dbl(operations$X1, evaluation)
operations$X1
dim(operations$X1)
length(operations$X1)
length(data)
data == operations$X1
data[46]
operations$X1[46]
operations <- readLines('day18.txt', col_names = FALSE)
operations <- readLines('day18.txt')
"%+%" <- function(x,y){x + y}
"%*%" <- function(x,y){x * y}
operations <- gsub("+", "%+%", operations, fixed = TRUE)
operations <- gsub("*", "%*%", operations, fixed = TRUE)
operations
eval(parse(text = operations))
evaluation <- function(X){
eval(parse(text = X))
}
map_dbl(operations, evaluation)
sum(map_dbl(operations, evaluation))
operations <- readLines('day18.txt')
"%+%" <- function(x,y){x + y}
operations <- gsub("+", "%+%", operations, fixed = TRUE)
sum(map_dbl(operations, evaluation))
as.character(sum(map_dbl(operations, evaluation)))
operations
operations <- 1 + 2 * 3 + 4 * 5 + 6
operations <- "1 + 2 * 3 + 4 * 5 + 6"
"%+%" <- function(x,y){x + y}
operations <- gsub("+", "%+%", operations, fixed = TRUE)
operations
1 + 2
3 + 4
5 + 6
3 * 7 * 11
sum(map_dbl(operations, evaluation))
(1+2) * (3+4) * (5+6)
