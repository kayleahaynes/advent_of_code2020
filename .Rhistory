t1$waypoint[[7]]
for (i in 2:nrow(ship_and_waypoint)){
ship_and_waypoint$waypoint_x[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_x[i-1] + ship_and_waypoint$waypoint_x_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ -ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ -ship_and_waypoint$waypoint_y[i-1])
ship_and_waypoint$waypoint_y[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_y[i-1] + ship_and_waypoint$waypoint_y_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ ship_and_waypoint$waypoint_x[i-1])
}
View(ship_and_waypoint)
t1$waypoint[[7]]
t1$waypoint[[8]]
t1$waypoint[[9]]
t1$waypoint[[17]]
t1$waypoint[[15]]
t1$waypoint[[14]]
t1$waypoint[[9]]
t1$waypoint[[10]]
t1$waypoint[[11]]
t1$waypoint[[12]]
ship_and_waypoint <- directions %>%
mutate(distance = as.numeric(distance),
distance = ifelse(direction == "L",-distance, distance), # if L subtract the distance
angle_change = ifelse(direction %in% c("L", "R"), distance, 0), # find the change in angle if L or R
distance = ifelse(direction %in% c("L", "R"), 0, distance)) %>%  # no change in distance if L or R
mutate(waypoint_x_movement = case_when(direction == "E" ~ distance,
direction == "W" ~ -1 * distance,
TRUE ~ 0),
waypoint_y_movement = case_when(direction == "N" ~ distance,
direction == "S" ~ -1 * distance,
TRUE ~ 0)) %>%
mutate(waypoint_x = ifelse(row_number() == 1, 1, 0),
waypoint_y = ifelse(row_number() == 1, -10, 0))
for (i in 2:nrow(ship_and_waypoint)){
ship_and_waypoint$waypoint_x[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_x[i-1] + ship_and_waypoint$waypoint_x_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ -ship_and_waypoint$waypoint_y[i-1])
ship_and_waypoint$waypoint_y[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_y[i-1] + ship_and_waypoint$waypoint_y_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ ship_and_waypoint$waypoint_x[i-1])
}
View(ship_and_waypoint)
t1$waypoint[[1]]
t1$waypoint[[2]]
t1$waypoint[[3]]
t1$waypoint[[4]]
t1$waypoint[[8]]
t1$waypoint[[7]]
ship_and_waypoint <- directions %>%
mutate(distance = as.numeric(distance),
distance = ifelse(direction == "L",-distance, distance), # if L subtract the distance
angle_change = ifelse(direction %in% c("L", "R"), distance, 0), # find the change in angle if L or R
distance = ifelse(direction %in% c("L", "R"), 0, distance)) %>%  # no change in distance if L or R
mutate(waypoint_x_movement = case_when(direction == "E" ~ distance,
direction == "W" ~ -1 * distance,
TRUE ~ 0),
waypoint_y_movement = case_when(direction == "N" ~ distance,
direction == "S" ~ -1 * distance,
TRUE ~ 0)) %>%
mutate(waypoint_x = ifelse(row_number() == 1, 1, 0),
waypoint_y = ifelse(row_number() == 1, -10, 0))
for (i in 2:nrow(ship_and_waypoint)){
ship_and_waypoint$waypoint_x[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_x[i-1] + ship_and_waypoint$waypoint_x_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ -ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ -ship_and_waypoint$waypoint_y[i-1])
ship_and_waypoint$waypoint_y[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_y[i-1] + ship_and_waypoint$waypoint_y_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ ship_and_waypoint$waypoint_x[i-1])
}
View(ship_and_waypoint)
t1$waypoint[[7]]
t1$waypoint[[8]]
t1$waypoint[[9]]
t1$waypoint[[10]]
t1$waypoint[[11]]
t1$waypoint[[12]]
ship_and_waypoint <- directions %>%
mutate(distance = as.numeric(distance),
distance = ifelse(direction == "L",-distance, distance), # if L subtract the distance
angle_change = ifelse(direction %in% c("L", "R"), distance, 0), # find the change in angle if L or R
distance = ifelse(direction %in% c("L", "R"), 0, distance)) %>%  # no change in distance if L or R
mutate(waypoint_x_movement = case_when(direction == "E" ~ distance,
direction == "W" ~ -1 * distance,
TRUE ~ 0),
waypoint_y_movement = case_when(direction == "N" ~ distance,
direction == "S" ~ -1 * distance,
TRUE ~ 0)) %>%
mutate(waypoint_x = ifelse(row_number() == 1, 1, 0),
waypoint_y = ifelse(row_number() == 1, -10, 0))
ship_and_waypoint <- directions %>%
mutate(distance = as.numeric(distance),
distance = ifelse(direction == "L",-distance, distance), # if L subtract the distance
angle_change = ifelse(direction %in% c("L", "R"), distance, 0), # find the change in angle if L or R
distance = ifelse(direction %in% c("L", "R"), 0, distance)) %>%  # no change in distance if L or R
mutate(waypoint_x_movement = case_when(direction == "E" ~ distance,
direction == "W" ~ -1 * distance,
TRUE ~ 0),
waypoint_y_movement = case_when(direction == "N" ~ distance,
direction == "S" ~ -1 * distance,
TRUE ~ 0)) %>%
mutate(waypoint_x = ifelse(row_number() == 1, 1, 0),
waypoint_y = ifelse(row_number() == 1, -10, 0))
for (i in 2:nrow(ship_and_waypoint)){
ship_and_waypoint$waypoint_x[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_x[i-1] + ship_and_waypoint$waypoint_x_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ -ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ ship_and_waypoint$waypoint_y[i-1])
ship_and_waypoint$waypoint_y[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_y[i-1] + ship_and_waypoint$waypoint_y_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ -ship_and_waypoint$waypoint_x[i-1])
}
ship_and_waypoint %>% View()
t1
t1$waypoint[[1]]
t1$waypoint[[2]]
t1$waypoint[[3]]
t1$waypoint[[4]]
t1$waypoint[[5]]
t1$waypoint[[6]]
t1$waypoint[[7]]
t1$waypoint[[8]]
t1$waypoint[[9]]
ship_and_waypoint <- directions %>%
mutate(distance = as.numeric(distance),
distance = ifelse(direction == "L",-distance, distance), # if L subtract the distance
angle_change = ifelse(direction %in% c("L", "R"), distance, 0), # find the change in angle if L or R
distance = ifelse(direction %in% c("L", "R"), 0, distance)) %>%  # no change in distance if L or R
mutate(waypoint_x_movement = case_when(direction == "E" ~ distance,
direction == "W" ~ -1 * distance,
TRUE ~ 0),
waypoint_y_movement = case_when(direction == "N" ~ distance,
direction == "S" ~ -1 * distance,
TRUE ~ 0)) %>%
mutate(waypoint_x = ifelse(row_number() == 1, 1, 0),
waypoint_y = ifelse(row_number() == 1, -10, 0))
for (i in 2:nrow(ship_and_waypoint)){
ship_and_waypoint$waypoint_x[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_x[i-1] + ship_and_waypoint$waypoint_x_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ -ship_and_waypoint$waypoint_y[i-1])
ship_and_waypoint$waypoint_y[i]  <- case_when(ship_and_waypoint$angle_change[i] == 0 ~ ship_and_waypoint$waypoint_y[i-1] + ship_and_waypoint$waypoint_y_movement[i],
ship_and_waypoint$angle_change[i] == 90 || ship_and_waypoint$angle_change[i] == -270 ~ -ship_and_waypoint$waypoint_x[i-1],
ship_and_waypoint$angle_change[i] == 180 || ship_and_waypoint$angle_change[i] == -180 ~ -ship_and_waypoint$waypoint_y[i-1],
ship_and_waypoint$angle_change[i] == 270 || ship_and_waypoint$angle_change[i] == -90 ~ ship_and_waypoint$waypoint_x[i-1])
}
ship_and_waypoint
ship_and_waypoint %>% View()
t1$waypoint[[8]]
t1$waypoint[[1]]
t1$waypoint[[2]]
t1$waypoint[[3]]
t1$waypoint[[4]]
t1$waypoint[[5]]
t1$waypoint[[6]]
t1$waypoint[[7]]
t1$waypoint[[8]]
ship_and_waypoint %>%
mutate(boat_movement_x = ifelse(direction == "F", distance * waypoint_x, 0),
boat_movement_y = ifelse(direction == "F", distance * waypoint_y, 0)) %>%
filter(direction == "F") %>%
mutate(ship_x = cumsum(distance * waypoint_x),
ship_y = cumsum(distance * waypoint_y)) %>%
tail(1) %>%
mutate(manhattan = abs(ship_x) + abs(ship_y))
input %>%
extract(X1, c("instruction", "amount"), "(.)(\\d+)", convert = TRUE) %>%
mutate(waypoint = accumulate2(instruction, amount, iterate, .init = c(10,1))[-1]) %>%
filter(instruction == "F") %>%
mutate(change = map2(amount, waypoint, ~ .x * .y))
input %>%
extract(X1, c("instruction", "amount"), "(.)(\\d+)", convert = TRUE) %>%
mutate(waypoint = accumulate2(instruction, amount, iterate, .init = c(10,1))[-1]) %>%
filter(instruction == "F") %>%
mutate(change = map2(amount, waypoint, ~ .x * .y)) %>%
mutate(position = accumulate(change, ~.x + .y)) %>%
tail(1) %>%
mutate(manhattan = map_dbl(position, ~sum(abs(.))))
rotate_right <- matrix(c(0,1,-1, 0), nrow = 2)
waypoint_shifts <- list(E = c(1,0),
S = c(0,-1),
W = c(-1, 0),
N = c(0, 1))
iterate <- function(waypoint, instruction, amount){
if(instruction %in% names(waypoint_shifts)){
waypoint + amount * waypoint_shifts[[instruction]]
}else if (instruction == "R"){
rotations <- amount/90
c(waypoint %*% (rotate_right %^% rotations))
} else if (instruction =="R"){
rotations <- 4 - amount/90
c(waypoint %*% (rotate_right %^% rotations))
} else {
waypoint
}
}
input <- read_table(paste0(here::here(), "/day12.txt"), col_names = FALSE)
input %>%
extract(X1, c("instruction", "amount"), "(.)(\\d+)", convert = TRUE) %>%
mutate(waypoint = accumulate2(instruction, amount, iterate, .init = c(10,1))[-1]) %>%
filter(instruction == "F") %>%
mutate(change = map2(amount, waypoint, ~ .x * .y)) %>%
mutate(position = accumulate(change, ~.x + .y)) %>%
tail(1) %>%
mutate(manhattan = map_dbl(position, ~sum(abs(.))))
ship_and_waypoint %>%
mutate(boat_movement_x = ifelse(direction == "F", distance * waypoint_x, 0),
boat_movement_y = ifelse(direction == "F", distance * waypoint_y, 0)) %>%
filter(direction == "F") %>%
mutate(ship_x = cumsum(distance * waypoint_x),
ship_y = cumsum(distance * waypoint_y)) %>%
tail(1) %>%
mutate(manhattan = abs(ship_x) + abs(ship_y))
ship_and_waypoint %>%
mutate(boat_movement_x = ifelse(direction == "F", distance * waypoint_x, 0),
boat_movement_y = ifelse(direction == "F", distance * waypoint_y, 0)) %>%
filter(direction == "F") %>%
mutate(ship_x = cumsum(distance * waypoint_x),
ship_y = cumsum(distance * waypoint_y)) %>%
tail(1) %>%
mutate(manhattan = abs(ship_x) + abs(ship_y)) %>% View()
input %>%
extract(X1, c("instruction", "amount"), "(.)(\\d+)", convert = TRUE) %>%
mutate(waypoint = accumulate2(instruction, amount, iterate, .init = c(10,1))[-1]) %>%
filter(instruction == "F") %>%
mutate(change = map2(amount, waypoint, ~ .x * .y)) %>%
mutate(position = accumulate(change, ~.x + .y)) %>%
tail(1) %>%
mutate(manhattan = map_dbl(position, ~sum(abs(.))))
memory <- rep(NA, 2020)
memory[number] <- c(1:length(numbers))
memory[number] <- c(1:length(number))
# set up -----------------------------------------------------------------------
library(tidyverse)
numbers <- c(0,3,6)
# solve the puzzle -------------------------------------------------------------
# part 1
memory <- data.frame(number = numbers, last_time_seen = 0,most_recent_time_seen = seq_along(numbers), number_times_seen = 1)
memory[numbers] <- c(1:length(numbers))
memory[numbers]
memory <- rep(NA, 2020)
memory
memory[numbers + 1] <- c(1:length(numbers))
memory
last_number <- tail(numbers, 1)
memory[last_number + 1]
ntimes <- rep(NA, 2020)
ntimes
ntimes <- rep(0, 2020)
ntimes
memory[numbers + 1] <- 1
memory <- rep(NA, 2020)
memory[numbers + 1] <- c(1:length(numbers))
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
ntimes[last_number + 1]
i
i <- 4
ntimes[last_number + 1] == 1
next_number <- 0
(i - 1) - memory[last_number + 1]
next_number <- (i - 1) - memory[last_number + 1]
memory <- rep(NA, 2021)
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
for (i in (length(numbers)+1):2020){
if(ntimes[last_number + 1] == 1){
next_number <- 0
} else{
next_number <- (i - 1) - memory[last_number + 1]
}
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
}
memory
ntimes
i <- 1
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
i <- 4
for (i in (length(numbers)+1):2020){
if(ntimes[last_number + 1] == 1){
next_number <- 0
} else{
next_number <- (i - 1) - memory[last_number + 1]
}
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
last_number <- next_number
}
memory
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
i <- 4
ntimes[last_number + 1]
ntimes[last_number + 1] == 1
next_number <- 0
next_number
next_number <- (i - 1) - memory[last_number + 1]
ntimes[last_number + 1] == 1
next_number <- 0
memory[next_number + 1]
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
memory
ntimes
last_number <- next_number
i <- 5
ntimes[last_number + 1]
next_number <- (i - 1) - memory[last_number + 1]
next_number
memory[last_number + 1]
(i - 1)
next_number
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
previous_times <- rep(NA, 2021)
previous_times[numbers + 1] <- 0
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
i <- 4
ntimes[last_number + 1] == 1
next_number <- 0
next_number <- (i - 1) - memory[last_number + 1]
next_number
previous_times[next_number + 1] <- memory[next_number + 1]
previous_times
memory[next_number + 1] <- i
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
previous_times <- rep(NA, 2021)
previous_times[numbers + 1] <- 0
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
for (i in (length(numbers)+1):2020){
if(ntimes[last_number + 1] == 1){
next_number <- 0
} else{
next_number <-memory[last_number + 1] - previous_times[last_number + 1]
}
previous_times[next_number + 1] <- memory[next_number + 1]
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
last_number <- next_number
}
memory
memory[2021]
memory[2020]
memory == 2020
which(memory == 2020)
which(memory == 2021)
which(memory == 2020)
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
previous_times <- rep(NA, 2021)
previous_times[numbers + 1] <- 0
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
for (i in (length(numbers)+1):10){
if(ntimes[last_number + 1] == 1){
next_number <- 0
} else{
next_number <-memory[last_number + 1] - previous_times[last_number + 1]
}
previous_times[next_number + 1] <- memory[next_number + 1]
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
last_number <- next_number
}
memory
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
previous_times <- rep(NA, 2021)
previous_times[numbers + 1] <- 0
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
for (i in (length(numbers)+1):2020){
if(ntimes[last_number + 1] == 1){
next_number <- 0
} else{
next_number <-memory[last_number + 1] - previous_times[last_number + 1]
}
previous_times[next_number + 1] <- memory[next_number + 1]
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
last_number <- next_number
}
memory
which(memory == 2020)
numbers <- c(1,3,2)
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
previous_times <- rep(NA, 2021)
previous_times[numbers + 1] <- 0
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
for (i in (length(numbers)+1):2020){
if(ntimes[last_number + 1] == 1){
next_number <- 0
} else{
next_number <-memory[last_number + 1] - previous_times[last_number + 1]
}
previous_times[next_number + 1] <- memory[next_number + 1]
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
last_number <- next_number
}
which(memory == 2020)
numbers <- c(16,11,15,0,1,7)
# solve the puzzle -------------------------------------------------------------
# part 1
memory <- data.frame(number = numbers, last_time_seen = 0,most_recent_time_seen = seq_along(numbers), number_times_seen = 1)
for (i in (length(numbers)+1):2020){
if(memory[memory$most_recent_time_seen == i-1,]$number_times_seen == 1){
if(nrow(memory[memory$number == 0,]) > 0){
memory[memory$number == 0,]$last_time_seen <- memory[memory$number == 0,]$most_recent_time_seen
memory[memory$number == 0,]$most_recent_time_seen <- i
memory[memory$number == 0,]$number_times_seen <- memory[memory$number == 0,]$number_times_seen + 1
}
else {
memory <- bind_rows(memory, data.frame(number = 0, last_time_seen = 0, most_recent_time_seen = i, number_times_seen = 1))
}
} else {
new_number <- (i-1) - memory[memory$most_recent_time_seen == i-1,]$last_time_seen
if(nrow(memory[memory$number == new_number,]) > 0){
memory[memory$number == new_number,]$last_time_seen <- memory[memory$number == new_number,]$most_recent_time_seen
memory[memory$number == new_number,]$most_recent_time_seen <- i
memory[memory$number == new_number,]$number_times_seen <- memory[memory$number == new_number,]$number_times_seen + 1
} else{
memory <- bind_rows(memory, data.frame(number = new_number, last_time_seen = 0, most_recent_time_seen = i, number_times_seen = 1))
}
}
}
memory %>% filter(most_recent_time_seen == 2020)
memory <- rep(NA, 2021)
memory[numbers + 1] <- c(1:length(numbers))
previous_times <- rep(NA, 2021)
previous_times[numbers + 1] <- 0
ntimes <- rep(0, 2020)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
for (i in (length(numbers)+1):2020){
if(ntimes[last_number + 1] == 1){
next_number <- 0
} else{
next_number <-memory[last_number + 1] - previous_times[last_number + 1]
}
previous_times[next_number + 1] <- memory[next_number + 1]
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
last_number <- next_number
}
which(memory == 2020) - 1
memory <- rep(NA, 30000000)
memory[numbers + 1] <- c(1:length(numbers))
previous_times <- rep(NA, 30000000)
previous_times[numbers + 1] <- 0
ntimes <- rep(0, 30000000)
ntimes[numbers + 1] <- 1
last_number <- tail(numbers, 1)
for (i in (length(numbers)+1):30000000){
if(ntimes[last_number + 1] == 1){
next_number <- 0
} else{
next_number <-memory[last_number + 1] - previous_times[last_number + 1]
}
previous_times[next_number + 1] <- memory[next_number + 1]
memory[next_number + 1] <- i
ntimes[next_number + 1] <- ntimes[next_number + 1] + 1
last_number <- next_number
}
which(memory == 30000000) - 1
reduce(1:2020, ~c(., coalesce(last(diff(which(.==last(.)))), 0)), .init = x)[2020]
x <- c(16,11,15,0,1,7)
reduce(1:2020, ~c(., coalesce(last(diff(which(.==last(.)))), 0)), .init = x)[2020]
reduce(1:2020, ~c(., coalesce(last(diff(which(.==last(.)))), 0)), .init = x)
previous_indices <- rep(NA, 30000000)
previous_indices[head(x. -1) + 1] <- seq_len(length(x)-1)
previous_indices[head(x, -1) + 1] <- seq_len(length(x)-1)
previous_indices
head(x, -1)
previous_indices[head(, -1) + 1] <- seq_len(length(x)-1)
x
seq_len(length(x)-1)
last_value <- last(x)
seq(length(x) + 1
)
i <- 1
seq(length(x) + 1, 30000000)
i <- 7
previous_indices[last_value + 1L]
