if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
i > nrow(instructions_i)
i
change <- 604
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i > nrow(instructions_i)){
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
i > nrow(instructions_i)
ran_instruction
nrow(instructions)
i
instruction <- instructions_i[i,]
instruction
acc
acc
print(test_loop(i, instructions))
i
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
i
change <- 205
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i > nrow(instructions_i)){
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
acc
nrow(instructions_i)
change
ran_instruction
test_loop <- function(change = 1, instructions){
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i == nrow(instructions_i)){
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
if(i > nrow(instructions_i)){
return(acc)
} else{
return(NA)
}
}
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
i
nrow(instructions_i)
game_console <- data.frame(instructions = read_lines(paste0(here::here(), "/day8.txt")))
instructions <- game_console %>%
extract(instructions, c('operation', 'plus_or_minus', 'argument'),
"([a-z]+) ([+-])(\\d+)")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
instruction <- instructions[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
ran_instruction
acc
test_loop <- function(change = 1, instructions){
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i == nrow(instructions_i)){
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
if(i > nrow(instructions_i)){
return(acc)
} else{
return(NA)
}
}
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
i
change <- 8
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
instructions_i
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i == nrow(instructions_i)){
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
ran_instruction
i
nrow(instructions_i)
test_loop <- function(change = 1, instructions){
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i == nrow(instructions_i)){
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
if(i == nrow(instructions_i)){
return(acc)
} else{
return(NA)
}
}
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
test_loop <- function(change = 1, instructions){
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i > nrow(instructions_i)){
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
if(i > nrow(instructions_i)){
return(acc)
} else{
return(NA)
}
}
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
test_loop <- function(change = 1, instructions){
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i == nrow(instructions_i)){
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
if(i > nrow(instructions_i)){
return(acc)
} else{
return(NA)
}
}
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
i
game_console <- data.frame(instructions = read_lines(paste0(here::here(), "/day8.txt")))
instructions <- game_console %>%
extract(instructions, c('operation', 'plus_or_minus', 'argument'),
"([a-z]+) ([+-])(\\d+)")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
instruction <- instructions[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
test_loop <- function(change = 1, instructions){
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i == nrow(instructions_i)){
if (instruction$operation == "acc"){
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
if(i > nrow(instructions_i)){
return(acc)
} else{
return(NA)
}
}
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
i
test_loop <- function(change = 1, instructions){
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
if (i == nrow(instructions_i)){
if (instruction$operation == "acc"){
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
k <- 1
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
if(i == nrow(instructions_i)){
return(acc)
} else{
return(NA)
}
}
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
test_loop <- function(change = 1, instructions){
instructions_i <- instructions # don't want to change instructions
instructions_i$operation[change] = ifelse (instructions_i$operation[change] == "jmp", "nop", "jmp")
i <- 1
k <- 0
acc <- 0
ran_instruction <- 1
while(k == 0){
# if the last row then terminate - if it's an acc then add on the number
if (i == nrow(instructions_i)){
if (instruction$operation == "acc"){
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
return(acc)
}
else{
instruction <- instructions_i[i,]
if(instruction$operation == "nop"){
i <- i + 1
} else if (instruction$operation == "acc"){
i <- i + 1
acc <- eval(parse(text = paste(acc, instruction$plus_or_minus, instruction$argument)))
}
else if (instruction$operation == "jmp"){
i <- eval(parse(text = paste(i, instruction$plus_or_minus, instruction$argument)))
}
if (i %in% ran_instruction){
k <- 1
} else{
ran_instruction <- c(ran_instruction, i)
}
}
}
return(NA)
}
for (i in which(instructions$operation %in% c("nop", "jmp"))){ # loop over the indexes of nops and jmps
if(!is.na(test_loop(i, instructions))){
print(test_loop(i, instructions))
break
}
}
