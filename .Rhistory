separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) %>%
mutate(count_valid = sum(validation)) %>%
filter(number_entries == count_value) %>%
select(passport_id) %>% # select passports
ungroup() %>%
distinct() %>% # get the distinct passwords
count() # count how many there are
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) %>%
mutate(count_valid = sum(validation)) %>%
filter(number_entries == count_valid) %>%
select(passport_id) %>% # select passports
ungroup() %>%
distinct() %>% # get the distinct passwords
count() # count how many there are
# load data --------------------------------------------------------------------
passports <- data.frame(entries = read_file(paste0(here::here(), "/day4.txt")))
# solve the puzzle -------------------------------------------------------------
# Part 1 Passports should all have 8 fields unless cid is missing in which case count it as valid
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
select(passport_id) %>% # select passports
ungroup() %>%
distinct() %>% # get the distinct passwords
count() # count how many there are
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE))
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE))
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) %>%
mutate(count_valid = sum(validation))
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) %>%
mutate(count_valid = sum(validation)) %>%
filter(number_entries == count_valid)
# load data --------------------------------------------------------------------
passports <- data.frame(entries = read_file(paste0(here::here(), "/day4.txt")))
# solve the puzzle -------------------------------------------------------------
# Part 1 Passports should all have 8 fields unless cid is missing in which case count it as valid
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
select(passport_id) %>% # select passports
ungroup() %>%
distinct() %>% # get the distinct passwords
count() # count how many there are
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE))
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) %>%
mutate(count_valid = sum(validation)) %>%
filter(number_entries == count_valid) %>%
select(passport_id) %>% # select passports
ungroup() %>%
distinct() %>% # get the distinct passwords
count() # count how many there are
# load data --------------------------------------------------------------------
passports <- data.frame(entries = read_file(paste0(here::here(), "/day4.txt")))
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) %>%
mutate(count_valid = sum(validation)) %>%
filter(number_entries == count_valid) %>%
select(passport_id) %>% # select passports
ungroup() %>%
distinct() %>% # get the distinct passwords
count() # count how many there are
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE))
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) %>% View()
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 | readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 | readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) -> t1
t1 %>% filter(key == cid)
t1 %>% filter(key == "cid")
t1 %>% filter(key == "cid") %>% View
t1 %>% filter(key == "byr") %>% View
t1 %>% filter(key == "iyr") %>% View
t1 %>% filter(key == "eyr") %>% View
t1 %>% filter(key == "hgt") %>% View
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 & readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 & readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) -> t1
t1 %>% filter(key == "hgt") %>% View
t1 %>% filter(key == "hcl") %>% View
t1 %>% filter(key == "xcl") %>% View
t1 %>% filter(key == "ecl") %>% View
t1 %>% filter(key == "pid") %>% View
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 & readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 & readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE)) %>%
mutate(count_valid = sum(validation)) %>%
filter(number_entries == count_valid) %>%
select(passport_id) %>% # select passports
ungroup() %>%
distinct() %>% # get the distinct passwords
count() # count how many there are
library(tidyverse)
read.csv("day4.txt",header = F,blank.lines.skip = F) -> passports
library(tidyverse)
read.csv("day4.txt",header = F,blank.lines.skip = F) -> passports
passports %>% as_tibble %>%
mutate(breaker=(V1=="")) %>%
mutate(id = cumsum(breaker)) %>%
separate(V1,into=c("V1","V2","V3","V4","V5","V6","V7","V8"),sep = " ") %>%
pivot_longer(V1:V8) %>%
dplyr::select(-breaker,-name) %>%
filter(!is.na(value)) %>%
filter(value!="") %>%
separate(value,into=c("type","value"),sep=":") -> pass_long
passports
passports %>% as_tibble %>%
mutate(breaker=(V1==""))
passports %>% as_tibble %>%
mutate(breaker=(V1=="")) %>%
mutate(id = cumsum(breaker))
passports %>% as_tibble %>%
mutate(breaker=(V1=="")) %>%
mutate(id = cumsum(breaker)) %>%
separate(V1,into=c("V1","V2","V3","V4","V5","V6","V7","V8"),sep = " ")
passports %>% as_tibble %>%
mutate(breaker=(V1=="")) %>%
mutate(id = cumsum(breaker)) %>%
separate(V1,into=c("V1","V2","V3","V4","V5","V6","V7","V8"),sep = " ") %>%
pivot_longer(V1:V8)
passports %>% as_tibble %>%
mutate(breaker=(V1=="")) %>%
mutate(id = cumsum(breaker)) %>%
separate(V1,into=c("V1","V2","V3","V4","V5","V6","V7","V8"),sep = " ") %>%
pivot_longer(V1:V8) %>%
dplyr::select(-breaker,-name)
passports %>% as_tibble %>%
mutate(breaker=(V1=="")) %>%
mutate(id = cumsum(breaker)) %>%
separate(V1,into=c("V1","V2","V3","V4","V5","V6","V7","V8"),sep = " ") %>%
pivot_longer(V1:V8) %>%
dplyr::select(-breaker,-name) %>%
filter(!is.na(value)) %>%
filter(value!="")
passports %>% as_tibble %>%
mutate(breaker=(V1=="")) %>%
mutate(id = cumsum(breaker)) %>%
separate(V1,into=c("V1","V2","V3","V4","V5","V6","V7","V8"),sep = " ") %>%
pivot_longer(V1:V8) %>%
dplyr::select(-breaker,-name) %>%
filter(!is.na(value)) %>%
filter(value!="") %>%
separate(value,into=c("type","value"),sep=":") -> pass_long
pass_long
pass_long %>% group_by(id) %>% mutate(valid= ("byr" %in% type)&
("iyr" %in% type)&
("eyr" %in% type)&
("hgt" %in% type)&
("hcl" %in% type)&
("ecl" %in% type)&
("pid" %in% type)) %>% filter(valid==T)
pass_long %>% group_by(id) %>% mutate(valid= ("byr" %in% type)&
("iyr" %in% type)&
("eyr" %in% type)&
("hgt" %in% type)&
("hcl" %in% type)&
("ecl" %in% type)&
("pid" %in% type)) %>% filter(valid==T) %>%
filter(type!="cid") %>%
pivot_wider(names_from=type,values_from=value) %>%
filter((nchar(byr)==4) & (as.numeric(byr) >= 1920) & (as.numeric(byr) <= 2002)) %>%
filter((nchar(iyr)==4) & (as.numeric(iyr) >= 2010) & (as.numeric(iyr) <= 2020)) %>%
filter((nchar(eyr)==4) & (as.numeric(eyr) >= 2020) & (as.numeric(eyr) <= 2030)) %>%
separate(hgt,into=c("val","unit"),sep=-2) %>%
mutate(hgt_logic=ifelse(unit=="cm",(as.numeric(val)>=150)&(as.numeric(val)<=193),
ifelse(unit=="in",(as.numeric(val)>=59)&(as.numeric(val)<=76),FALSE))) %>%
filter(hgt_logic) %>%
separate(hcl,into=c("srt","end"),sep=1) %>%
filter(srt=="#") %>%
filter(nchar(str_extract_all(end, '[0-9, a-f]+')) == 6) %>%
filter(ecl %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")) %>%
filter((nchar(pid)==9))
# load data --------------------------------------------------------------------
passports <- data.frame(entries = read_file(paste0(here::here(), "/day4.txt")))
passports %>%
separate_rows(entries, sep = "\n\n")
passports
passports %>%
separate_rows(entries, sep = "\n\n")
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n()))
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ")
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n")
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE))
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
select(passport_id) %>% # select passports
ungroup() %>%
distinct() %>% # get the distinct passwords
count()
passports %>%
separate_rows(entries, sep = "\n\n") %>% # a blank line separates passports
mutate(passport_id = paste0("Passport", 1:n())) %>% # keep track of passports by given them an id
separate_rows(entries, sep = " ") %>%  # separate key:values from space
separate_rows(entries, sep = "\n") %>% # separate key:values from new line
filter(entries != "") %>%  # filter out blanks
separate(entries, into = c("key", "value"), sep = ":") %>%  # separate into key values
group_by(passport_id) %>% # group by passort id
mutate(number_entries = n()) %>%  # count number of entries on each passport
mutate(cid_exists = any(key == "cid")) %>%
filter(number_entries == 8 | (number_entries == 7 & cid_exists == FALSE)) %>% # find passports which satisfy the condition
mutate(height_units = ifelse(key == "hgt", ifelse(nchar(value) == 5, str_sub(value, 4,5), str_sub(value, 3,4)), "NA")) %>% # this checks the height is numeric and then character
mutate(validation = case_when(key == "byr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 1920 & as.numeric(value) <= 2002, TRUE, FALSE),
key == "iyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2010 & as.numeric(value) <= 2020, TRUE, FALSE),
key == "eyr" ~ ifelse(nchar(value) == 4 & as.numeric(value) >= 2020 & as.numeric(value) <= 2030, TRUE, FALSE),
key == "hgt" ~ ifelse((height_units == "cm" & readr::parse_number(value) >= 150 & readr::parse_number(value) <= 193) |
(height_units == "in" & readr::parse_number(value) >= 59 & readr::parse_number(value) <= 76), TRUE, FALSE),
key == "hcl" ~ ifelse(str_sub(value, 1, 1) == "#" & nchar(str_extract_all(value, '[0-9, a-f]+')) == 6, TRUE, FALSE),
key == "ecl" ~ ifelse(nchar(value) == 3 & (value %in% c("amb", "blu", "brn", "gry", "grn", "hzl", "oth")), TRUE, FALSE),
key == "pid" ~ ifelse(nchar(str_extract_all(value, '[0-9]+')) == 9, TRUE, FALSE),
key == "cid" ~ TRUE))
